# AutoDocOps Development Setup Script for Windows
# Este script configura el entorno de desarrollo autom√°ticamente

param(
    [switch]$SkipTests = $false,
    [switch]$Force = $false
)

Write-Host "üöÄ AutoDocOps Development Setup" -ForegroundColor Green
Write-Host "================================" -ForegroundColor Green

# Verificar prerrequisitos
Write-Host "üìã Verificando prerrequisitos..." -ForegroundColor Yellow

# Verificar .NET
try {
    $dotnetVersion = dotnet --version
    Write-Host "‚úÖ .NET SDK encontrado: $dotnetVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: .NET 8 SDK no est√° instalado" -ForegroundColor Red
    Write-Host "Instala .NET 8 SDK desde: https://dotnet.microsoft.com/download" -ForegroundColor Yellow
    exit 1
}

# Verificar Docker
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker encontrado: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Docker no est√° instalado" -ForegroundColor Red
    Write-Host "Instala Docker Desktop desde: https://www.docker.com/get-started" -ForegroundColor Yellow
    exit 1
}

# Verificar Docker Compose
try {
    docker compose version | Out-Null
    Write-Host "‚úÖ Docker Compose disponible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Docker Compose no est√° disponible" -ForegroundColor Red
    exit 1
}

# Configurar archivo de entorno
Write-Host "üîß Configurando archivo de entorno..." -ForegroundColor Yellow
if (-not (Test-Path ".env")) {
    Copy-Item ".env.example" ".env"
    Write-Host "‚úÖ Archivo .env creado desde .env.example" -ForegroundColor Green
    Write-Host "üìù Por favor, edita .env con tus configuraciones antes de continuar" -ForegroundColor Yellow
    
    if (-not $Force) {
        $response = Read-Host "¬øQuieres continuar con la configuraci√≥n por defecto? (y/N)"
        if ($response -notmatch "^[Yy]$") {
            Write-Host "‚è∏Ô∏è  Setup pausado. Edita .env y ejecuta este script nuevamente." -ForegroundColor Yellow
            exit 0
        }
    }
} else {
    Write-Host "‚úÖ Archivo .env ya existe" -ForegroundColor Green
}

# Crear directorios necesarios
Write-Host "üìÅ Creando directorios necesarios..." -ForegroundColor Yellow
$directories = @("logs", "data\postgres", "data\redis")
foreach ($dir in $directories) {
    if (-not (Test-Path $dir)) {
        New-Item -ItemType Directory -Path $dir -Force | Out-Null
        Write-Host "‚úÖ Directorio creado: $dir" -ForegroundColor Green
    }
}

# Construir aplicaci√≥n
Write-Host "üî® Construyendo aplicaci√≥n .NET..." -ForegroundColor Yellow
try {
    dotnet build src\AutoDocOps.WebAPI --configuration Debug
    Write-Host "‚úÖ Aplicaci√≥n construida exitosamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error construyendo la aplicaci√≥n" -ForegroundColor Red
    exit 1
}

# Ejecutar tests (opcional)
if (-not $SkipTests) {
    Write-Host "üß™ Ejecutando tests unitarios..." -ForegroundColor Yellow
    try {
        dotnet test tests\AutoDocOps.Tests --logger "console;verbosity=minimal"
        Write-Host "‚úÖ Tests ejecutados exitosamente" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è  Algunos tests fallaron, pero continuando..." -ForegroundColor Yellow
    }
}

# Construir im√°genes Docker
Write-Host "üê≥ Construyendo im√°genes Docker..." -ForegroundColor Yellow
try {
    docker compose build
    Write-Host "‚úÖ Im√°genes Docker construidas" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error construyendo im√°genes Docker" -ForegroundColor Red
    exit 1
}

# Iniciar servicios
Write-Host "üöÄ Iniciando servicios..." -ForegroundColor Yellow
try {
    docker compose -f docker-compose.yml -f docker-compose.override.yml up -d
    Write-Host "‚úÖ Servicios iniciados" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error iniciando servicios" -ForegroundColor Red
    exit 1
}

# Esperar a que los servicios est√©n listos
Write-Host "‚è≥ Esperando a que los servicios est√©n listos..." -ForegroundColor Yellow
Start-Sleep -Seconds 15

# Verificar estado de los servicios
Write-Host "üîç Verificando estado de los servicios..." -ForegroundColor Yellow

# Verificar WebAPI
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8080/health/live" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ WebAPI est√° listo" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå WebAPI no est√° listo" -ForegroundColor Red
}

# Mostrar informaci√≥n de servicios
Write-Host ""
Write-Host "üéâ Setup completado!" -ForegroundColor Green
Write-Host "===================" -ForegroundColor Green
Write-Host ""
Write-Host "üåê Servicios disponibles:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ API: http://localhost:8080" -ForegroundColor White
Write-Host "  ‚Ä¢ Swagger: http://localhost:8080/swagger" -ForegroundColor White
Write-Host "  ‚Ä¢ pgAdmin: http://localhost:5050 (admin@autodocops.com / admin)" -ForegroundColor White
Write-Host ""
Write-Host "üîß Comandos √∫tiles:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Ver logs: docker compose logs -f" -ForegroundColor White
Write-Host "  ‚Ä¢ Parar servicios: docker compose down" -ForegroundColor White
Write-Host "  ‚Ä¢ Reiniciar: docker compose restart" -ForegroundColor White
Write-Host ""
Write-Host "üß™ Endpoints de prueba:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Health: curl http://localhost:8080/api/test/health" -ForegroundColor White
Write-Host "  ‚Ä¢ Cache: curl http://localhost:8080/api/test/cache/demo" -ForegroundColor White
Write-Host "  ‚Ä¢ System Info: curl http://localhost:8080/api/test/system-info" -ForegroundColor White
Write-Host ""
Write-Host "üìù Para ejecutar tests funcionales en PowerShell:" -ForegroundColor Cyan
Write-Host "  Invoke-WebRequest -Uri 'http://localhost:8080/api/test/health' | ConvertFrom-Json" -ForegroundColor White
