version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: autodocops-postgres
    environment:
      POSTGRES_DB: autodocops
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - autodocops-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: autodocops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - autodocops-network

  # IL Scanner gRPC Service
  ilscanner:
    build:
      context: .
      dockerfile: src/AutoDocOps.ILScanner/Dockerfile
    container_name: autodocops-ilscanner
    ports:
      - "5000:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - autodocops-network

  # Web API Service
  webapi:
    build:
      context: .
      dockerfile: src/AutoDocOps.WebAPI/Dockerfile
    container_name: autodocops-webapi
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=autodocops;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - ILScanner__GrpcEndpoint=http://ilscanner:5000
      - USE_FAKE_LLM=${USE_FAKE_LLM:-true}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_API_BASE=${OPENAI_API_BASE:-}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-this_is_a_very_secure_jwt_secret_key_for_testing_purposes_32_chars_minimum}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ilscanner:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - autodocops-network

  # OpenTelemetry Collector (receives OTLP, exposes Prometheus scrape endpoint)
  otel-collector:
    image: otel/opentelemetry-collector:0.113.0
    container_name: autodocops-otel-collector
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./monitoring/otel-collector-config.yml:/etc/otelcol/config.yaml:ro
    ports:
      - "4318:4318"   # OTLP HTTP
      - "9464:9464"   # Prometheus metrics endpoint
    depends_on:
      - webapi
    networks:
      - autodocops-network

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: autodocops-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@autodocops.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - autodocops-network
    profiles:
      - dev

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: autodocops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - autodocops-network
    profiles:
      - monitoring

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: autodocops-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - autodocops-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  autodocops-network:
    driver: bridge

